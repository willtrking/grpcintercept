package main


const TEMPLATE = `// Code generated by grpcintercept
// source: {{ .SourceFile }}
// DO NOT EDIT!

package {{.Package}}

import (
  "google.golang.org/grpc/grpclog"
  "google.golang.org/grpc"
  "golang.org/x/net/context"
  grpcintercept "github.com/willtrking/grpcintercept/types"

  {{ range .ProtobufPackages}}
  {{.}}
  {{ end }}
  {{ range .InterceptorPackages}}
  {{.}}
  {{ end }}
)

{{ if .IsMainFile }}
type {{.ServiceType}}Interceptor struct{
  service *{{.ServiceType}}
  i grpcintercept.Interceptor
}

func RegisterService(s *grpc.Server, i grpcintercept.Interceptor) {
  srv := new({{.ServiceType}}Interceptor)
  srv.i = i
  {{.RegisterFunc}}(s,srv)
}
{{ end }}

{{ range .ServiceCalls }}

func (a *{{.ServiceType}}Interceptor) {{.CallName}}(ctx context.Context, {{.InputProto}}) ({{.OutputProto}}, error){
  di,_ := a.i.Init()

  defer func(di grpcintercept.InterceptorData){

    ce := di.Close()
    if ce != nil {
      grpclog.Println("Failed to close InterceptorData on {{.CallName}} ",ce)
    }

  }(di)

  return a.service.{{.CallName}}(ctx,{{.InputProtoName}},di.({{.InputInterceptor}}))
}

{{ end }}

`
